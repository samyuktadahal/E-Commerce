/* 1. List all unique cities where customers are located. */

SELECT DISTINCT customer_city FROM customers

/* 2. Count the number of orders placed in 2017. */

SELECT COUNT(order_id) FROM orders WHERE YEAR(order_purchase_timestamp) = 2017

/* 3. Find the total sales per Category. */

SELECT UPPER(p.product_category) AS category, 
ROUND(SUM(p2.payment_value),2) AS sales
FROM products p 
INNER JOIN order_items oi ON p.product_id = oi.product_id
INNER JOIN payments p2 ON p2.order_id = oi.order_id
GROUP BY product_category
ORDER BY category ASC;

/* 4. Calculate the percentage of orders that were paid in installments. */

SELECT((SUM(CASE WHEN payment_installments >= 1 THEN 1
ELSE 0 END))/COUNT(*))*100 FROM payments;

/* 5. Count the number of customers from each state. */

SELECT customer_state, COUNT(customer_id) AS Number_Of_Customers
FROM customers
GROUP BY customer_state;

/* 6. Calculate the number of Orders per Month in 2018. */

SELECT 
  DATENAME(MONTH, order_purchase_timestamp) AS Month_Name,
  COUNT(order_id) AS TotalOrders
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY DATENAME(MONTH, order_purchase_timestamp)
ORDER BY Month_Name ASC;

/* 7. Find the Average number of Products per order, Grouped by Customer City. */ -- IMPORTANT QUERY

WITH count_per_order AS   -- CTE used 
(SELECT o.order_id, o.customer_id, COUNT(oi.order_id) AS OrderCount
FROM orders o 
INNER JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY o.order_id, o.customer_id)

SELECT c.customer_city, ROUND(AVG(count_per_order.OrderCount),2) AS Average_Orders
FROM customers c 
INNER JOIN count_per_order ON c.customer_id = count_per_order.customer_id
GROUP BY c.customer_city 
ORDER BY average_orders DESC

/* 8. Calculate the Percentage of Total Revenue contributed by each Product Category. */

SELECT UPPER(p.product_category) AS Category, 
ROUND((SUM(p2.payment_value)/(SELECT SUM(payment_value) FROM payments))*100,2) AS Sales_Percentage
FROM products p
INNER JOIN order_items oi ON p.product_id = oi.product_id
INNER JOIN payments p2 ON p2.order_id = oi.order_id
GROUP BY p.product_category
ORDER BY sales_percentage DESC

/* 9. Identify the Correlation between Product,Price and the Number of times a Product has been Purchased. */

SELECT UPPER(p.product_category) AS ProductCategory, COUNT(oi.product_id) AS TotalProducts, 
ROUND(AVG(oi.price),2) AS AvgPrice
FROM products p 
INNER JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_category
ORDER BY AvgPrice DESC

/* 10. Calculate the Total Revenue generated by each Seller and Rank them by Revenue. */

SELECT seller_id, ROUND(SUM(price + freight_value), 2) AS Total_Revenue,
RANK() OVER (ORDER BY SUM(price + freight_value) DESC) AS Revenue_Rank
FROM order_items
GROUP BY seller_id
ORDER BY total_revenue DESC;


/* 11. Calculate the moving Average of Order values for each Customer over their Order history. */

SELECT customer_id, order_purchase_timestamp, payment,
AVG(payment) OVER(PARTITION BY customer_id ORDER BY order_purchase_timestamp
ROWS BETWEEN 2 PRECEDING and CURRENT ROW) AS Moving_Avg
FROM
(SELECT o.customer_id, o.order_purchase_timestamp, p.payment_value AS payment
FROM payments p 
INNER JOIN orders o ON p.order_id = o.order_id) AS a    -- "a" is a Derived Table (Sub-Query)

/* 12. Calculate the Cumulative Sales per Month for Each Year. */

SELECT Years, Months, Payment,
SUM(payment) OVER (PARTITION BY years ORDER BY months) AS Cumulative_Sales
FROM 
(SELECT 
    YEAR(o.order_purchase_timestamp) AS years,
    MONTH(o.order_purchase_timestamp) AS months,
    ROUND(SUM(p.payment_value), 2) AS payment
  FROM orders o 
  INNER JOIN payments p ON o.order_id = p.order_id
  GROUP BY YEAR(o.order_purchase_timestamp), MONTH(o.order_purchase_timestamp)) AS a  -- "a" is Derived Table
ORDER BY years, months;

/* 13. Calculate the Year-Over-Year Growth Rate of Total Sales. */

WITH yearly_sales AS (
  SELECT 
    YEAR(o.order_purchase_timestamp) AS Sales_Year,
    SUM(p.payment_value) AS Total_Sales
  FROM orders o
  JOIN payments p ON o.order_id = p.order_id
  GROUP BY YEAR(o.order_purchase_timestamp)
),
growth_calculation AS (
  SELECT 
    Sales_Year,
    Total_Sales,
    LAG(Total_Sales) OVER (ORDER BY Sales_Year) AS Previous_Year_Sales  --"LAG" to fetch the previous year's sales for comparision
  FROM yearly_sales
)
SELECT 
  Sales_Year,
  Total_Sales,
  Previous_Year_Sales,
  ROUND((Total_Sales - Previous_Year_Sales) * 100.0 / NULLIF(Previous_Year_Sales, 0),2) AS Growth_Percent  --"NULLIF(..., 0)" avoids division by zero
FROM growth_calculation
ORDER BY Sales_Year;

/* 14. Calculate the Retention Rate of Customers, defined as the percentage of Customers who make another purchase
       within 6 Months of their first purchase. */

WITH first_orders AS (   --CTE used
  SELECT 
    customer_id,
    MIN(order_purchase_timestamp) AS first_purchase
  FROM orders
  GROUP BY customer_id
),
follow_up_orders AS (    --CTE used
  SELECT 
    o.customer_id,
    MIN(o.order_purchase_timestamp) AS second_purchase
  FROM orders o
  INNER JOIN first_orders f ON o.customer_id = f.customer_id
  WHERE o.order_purchase_timestamp > f.first_purchase
    AND o.order_purchase_timestamp <= DATEADD(MONTH, 6, f.first_purchase)
  GROUP BY o.customer_id
)
SELECT 
  COUNT(f.customer_id) AS total_customers,
  COUNT(follow.customer_id) AS retained_customers,
  ROUND(COUNT(follow.customer_id) * 100.0 / COUNT(f.customer_id), 2) AS retention_rate_percent
FROM first_orders f
LEFT JOIN follow_up_orders follow ON f.customer_id = follow.customer_id;

/* 15. Identify the Top 3 Customers who spent the most money in each year. */

WITH Customer_Yearly_Spending AS(
SELECT 
      c.customer_id,
	  YEAR(o.order_purchase_timestamp) AS Order_Year,
	  SUM(p.payment_value) AS Total_Spent
FROM orders o
INNER JOIN payments p ON o.order_id = p.order_id
INNER JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_id, YEAR(o.order_purchase_timestamp)
),
Ranked_Customers AS(
SELECT *,     --"SELECT *," select all columns from the Customer_Yearly_Spending
        RANK() OVER(PARTITION BY Order_Year ORDER BY Total_Spent DESC) AS Spending_Rank
		FROM Customer_Yearly_Spending
)
SELECT
      Order_Year,
	  Total_Spent,
	  customer_id,
	  Spending_Rank
FROM Ranked_Customers
WHERE Spending_Rank <= 3
ORDER BY Order_Year, Spending_Rank;
      
